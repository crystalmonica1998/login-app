// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                        String          @id @default(cuid())
  name                      String?
  email                     String          @unique
  emailVerified             DateTime?
  image                     String?
  password                  String?
  role                      UserRole @default(USER)
  accounts                  Account[]
  isTwoFactorEnabled        Boolean @default(false)
  twoFactorConfirmation     TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
 // fields: [userId]: The userId field in the Account model is used to establish the relationship.
 // references: [id]: The userId field in the Account model refers to the id field in the User model.
 // onDelete: Cascade: If a user is deleted, all associated accounts will also be deleted automatically.
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id                String @id @default(cuid())
  email             String
  token             String @unique
  expires           DateTime

  // 1 unique token per specific email
  @@unique([email, token])
}

model PasswordResetToken {
  id                String @id @default(cuid())
  email             String
  token             String @unique
  expires           DateTime

  // A unique combination of email and token
  @@unique([email, token])
}

model TwoFactorToken {
  id                String @id @default(cuid())
  email             String
  token             String @unique
  expires           DateTime

  // A unique combination of email and token
  @@unique([email, token])
}

model TwoFactorConfirmation {
  id                String @id @default(cuid())
  userId            String
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Can also add @unique after userId, this means userId is unique
  @@unique([userId])
}